async def on_unit_created(self, unit: Unit):
    """Override this in your bot class. This function is called when a unit is created.

    :param unit:"""

async def on_unit_type_changed(self, unit: Unit, previous_type: UnitTypeId):
    """Override this in your bot class. This function is called when a unit type has changed. To get the current UnitTypeId of the unit, use 'unit.type_id'

    This may happen when a larva morphed to an egg, siege tank sieged, a zerg unit burrowed, a hatchery morphed to lair,
    a corruptor morphed to broodlordcocoon, etc..

    Examples::

        print(f"My unit changed type: {unit} from {previous_type} to {unit.type_id}")

    :param unit:
    :param previous_type:
    """

async def on_building_construction_started(self, unit: Unit):
    """
    Override this in your bot class.
    This function is called when a building construction has started.

    :param unit:
    """

async def on_building_construction_complete(self, unit: Unit):
    """
    Override this in your bot class. This function is called when a building
    construction is completed.

    :param unit:
    """

async def on_upgrade_complete(self, upgrade: UpgradeId):
    """
    Override this in your bot class. This function is called with the upgrade id of an upgrade that was not finished last step and is now.

    :param upgrade:
    """

async def on_unit_took_damage(self, unit: Unit, amount_damage_taken: float):
    """
    Override this in your bot class. This function is called when your own unit (unit or structure) took damage.
    It will not be called if the unit died this frame.

    This may be called frequently for terran structures that are burning down, or zerg buildings that are off creep,
    or terran bio units that just used stimpack ability.
    TODO: If there is a demand for it, then I can add a similar event for when enemy units took damage

    Examples::

        print(f"My unit took damage: {unit} took {amount_damage_taken} damage")

    :param unit:
    :param amount_damage_taken:
    """

async def on_enemy_unit_entered_vision(self, unit: Unit):
    """
    Override this in your bot class. This function is called when an enemy unit (unit or structure) entered vision (which was not visible last frame).

    :param unit:
    """

async def on_enemy_unit_left_vision(self, unit_tag: int):
    """
    Override this in your bot class. This function is called when an enemy unit (unit or structure) left vision (which was visible last frame).
    Same as the self.on_unit_destroyed event, this function is called with the unit's tag because the unit is no longer visible anymore.
    If you want to store a snapshot of the unit, use self._enemy_units_previous_map[unit_tag] for units or self._enemy_structures_previous_map[unit_tag] for structures.

    Examples::

        last_known_unit = self._enemy_units_previous_map.get(unit_tag, None) or self._enemy_structures_previous_map[unit_tag]
        print(f"Enemy unit left vision, last known location: {last_known_unit.position}")

    :param unit_tag:
    """

async def on_before_start(self):
    """
    Override this in your bot class. This function is called before "on_start"
    and before "prepare_first_step" that calculates expansion locations.
    Not all data is available yet.
    This function is useful in realtime=True mode to split your workers or start producing the first worker.
    """`

    UnitTypeData
    @property
    def tech_alias(self) -> Optional[List[UnitTypeId]]:
        """Building tech equality, e.g. OrbitalCommand is the same as CommandCenter
        Building tech equality, e.g. Hive is the same as Lair and Hatchery
        For Hive, this returns [UnitTypeId.Hatchery, UnitTypeId.Lair]
        For SCV, this returns None"""
        return_list = [
            UnitTypeId(tech_alias) for tech_alias in self._proto.tech_alias if tech_alias in self._game_data.units
        ]
        return return_list if return_list else None

    @property
    def unit_alias(self) -> Optional[UnitTypeId]:
        """ Building type equality, e.g. FlyingOrbitalCommand is the same as OrbitalCommand """
        if self._proto.unit_alias == 0:
            return None
        if self._proto.unit_alias not in self._game_data.units:
            return None
        """ For flying OrbitalCommand, this returns UnitTypeId.OrbitalCommand """
        return UnitTypeId(self._proto.unit_alias)


Class AbilityData under game_data.py
        @property
    def exact_id(self) -> AbilityId:
        """ Returns the exact ID of the ability """
        return AbilityId(self._proto.ability_id)

    @property
    def link_name(self) -> str:
        """ For Stimpack this returns 'BarracksTechLabResearch' """
        return self._proto.link_name

    @property
    def button_name(self) -> str:
        """ For Stimpack this returns 'Stimpack' """
        return self._proto.button_name

    @property
    def friendly_name(self) -> str:
        """ For Stimpack this returns 'Research Stimpack' """
        return self._proto.friendly_name